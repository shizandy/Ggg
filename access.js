// Module de gestion d'authentification pour les commandes du bot

// Fichier: Plugins/access.js

const { cmd } = require('../command');

const axios = require('axios');

cmd({

    pattern: "authlist",

    desc: "Liste toutes les instances de bot enregistr√©es",

    category: "owner",

    filename: __filename

},

async(conn, mek, m, {from, sender, senderNumber, isCmd, command, args, q, isGroup, quoted, botNumber, pushname, isMe, isOwner, reply}) => {

    try {

        if (!isOwner) return reply("‚ùå Cette commande est r√©serv√©e au propri√©taire");

        

        const AUTH_SERVER = 'https://botac.vercel.app';

        const ADMIN_API_KEY = 'andy6916';

        

        try {

            const response = await axios.get(`${AUTH_SERVER}/api/instances`, {

                headers: {

                    'x-admin-key': ADMIN_API_KEY

                }

            });

            

            if (!response.data.success) {

                return reply(`‚ùå Erreur: ${response.data.message}`);

            }

            

            const instances = response.data.instances;

            

            if (instances.length === 0) {

                return reply('Aucune instance enregistr√©e');

            }

            

            // Construction du message de r√©ponse

            let message = `*INSTANCES DE BOT ENREGISTR√âES*\n\n`;

            

            for (let i = 0; i < instances.length; i++) {

                const inst = instances[i];

                message += `*${i+1}. ${inst.phoneNumber}*\n`;

                message += `  ‚Ä¢ ID: ${inst.instanceId.substring(0, 50)}...\n`;

                message += `  ‚Ä¢ Status: ${inst.status}\n`;

                message += `  ‚Ä¢ Cr√©√© le: ${new Date(inst.createdAt).toLocaleString()}\n`;

                if (inst.expiresAt) {

                    message += `  ‚Ä¢ Expire le: ${new Date(inst.expiresAt).toLocaleString()}\n`;

                }

                message += `\n`;

            }

            

            reply(message);

            

        } catch (error) {

            console.error('Error:', error);

            reply(`‚ùå Erreur: ${error.message}`);

        }

    } catch (e) {

        console.error(e);

        reply(`‚ùå Erreur: ${e.message}`);

    }

});

cmd({

    pattern: "authapprove",

    desc: "Approuver une instance de bot",

    category: "owner",

    filename: __filename

},

async(conn, mek, m, {from, sender, senderNumber, isCmd, command, args, q, isGroup, quoted, botNumber, pushname, isMe, isOwner, reply}) => {

    try {

        if (!isOwner) return reply("‚ùå Cette commande est r√©serv√©e au propri√©taire");

        

        const AUTH_SERVER = 'https://botac.vercel.app';

        const ADMIN_API_KEY = 'andy6916';

        

        if (!q) {

            return reply(`‚ùå Format: .authapprove <instanceId> <jours>`);

        }

        

        const argArray = q.trim().split(' ');

        

        if (argArray.length < 2) {

            return reply(`‚ùå Format: .authapprove <instanceId> <jours>`);

        }

        

        const instanceId = argArray[0];

        const days = parseInt(argArray[1]);

        

        if (isNaN(days)) {

            return reply('‚ùå Le nombre de jours doit √™tre un nombre valide');

        }

        

        try {

            const response = await axios.post(`${AUTH_SERVER}/api/authorize`, {

                instanceId,

                expiresInDays: days

            }, {

                headers: {

                    'x-admin-key': ADMIN_API_KEY

                }

            });

            

            if (!response.data.success) {

                return reply(`‚ùå Erreur: ${response.data.message}`);

            }

            

            const auth = response.data.authorization;

            

            reply(`‚úÖ *INSTANCE APPROUV√âE*

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ„Äå D√âTAILS „Äç‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê

‚îÇ üì± NUM√âRO: ${auth.phoneNumber}

‚îÇ üÜî ID: ${auth.instanceId.substring(0, 8)}...

‚îÇ ‚è±Ô∏è EXPIRE: Dans ${days} jours

‚îÇ üìÖ DATE: ${new Date().toLocaleString()}

‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò`);

            

        } catch (error) {

            console.error('Error:', error);

            reply(`‚ùå Erreur: ${error.message}`);

        }

        

    } catch (e) {

        console.error(e);

        reply(`‚ùå Erreur: ${e.message}`);

    }

});

cmd({

    pattern: "authrevoke",

    desc: "R√©voquer une instance de bot",

    category: "owner",

    filename: __filename

},

async(conn, mek, m, {from, sender, senderNumber, isCmd, command, args, q, isGroup, quoted, botNumber, pushname, isMe, isOwner, reply}) => {

    try {

        if (!isOwner) return reply("‚ùå Cette commande est r√©serv√©e au propri√©taire");

        

        const AUTH_SERVER = 'https://botac.vercel.app';

        const ADMIN_API_KEY = 'andy6916';

        

        if (!q) {

            return reply(`‚ùå Format: .authrevoke <instanceId>`);

        }

        

        const instanceId = q.trim();

        

        try {

            const response = await axios.post(`${AUTH_SERVER}/api/revoke`, {

                instanceId

            }, {

                headers: {

                    'x-admin-key': ADMIN_API_KEY

                }

            });

            

            if (!response.data.success) {

                return reply(`‚ùå Erreur: ${response.data.message}`);

            }

            

            reply(`‚úÖ *INSTANCE R√âVOQU√âE* ‚úÖ

L'instance ${instanceId.substring(0, 8)}... a √©t√© r√©voqu√©e avec succ√®s.

Le bot sera automatiquement arr√™t√© √† sa prochaine v√©rification.`);

            

        } catch (error) {

            console.error('Error:', error);

            reply(`‚ùå Erreur: ${error.message}`);

        }

        

    } catch (e) {

        console.error(e);

        reply(`‚ùå Erreur: ${e.message}`);

    }

});